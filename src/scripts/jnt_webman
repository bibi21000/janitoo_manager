#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""DBManager for Janitoo
"""
from __future__ import print_function
from gevent import monkey
monkey.patch_all()

__license__ = """
    This file is part of Janitoo.

    Janitoo is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Janitoo is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Janitoo. If not, see <http://www.gnu.org/licenses/>.

"""
__author__ = 'Sébastien GALLET aka bibi21000'
__email__ = 'bibi21000@gmail.com'
__copyright__ = "Copyright © 2013-2014-2015 Sébastien GALLET aka bibi21000"

import sys
import os
import subprocess
import requests

from flask import current_app, url_for
from werkzeug.utils import import_string
from sqlalchemy.exc import IntegrityError, OperationalError
from flask_script import (Manager, Shell, Server, prompt, prompt_pass,
                          prompt_bool)

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, scoped_session
from alembic.script import ScriptDirectory as alScriptDirectory
from alembic import command as alcommand
from alembic.migration import MigrationContext

from janitoo.options import JNTOptions
from janitoo_db.base import Base, create_db_engine
from janitoo_db.migrate import Config as alConfig, collect_configs, janitoo_config

from janitoo_manager import create_app
from janitoo_manager.extensions import db, plugin_manager, socketio

# Use the development configuration if available
try:
    from janitoo_manager.configs.development import DevelopmentConfig
except ImportError:
    pass
from janitoo_flask.options import Config

try:
    config = DevelopmentConfig()
except :
    print("Use default config")
    config = Config()

app = create_app(config)
manager = Manager(app)

# Used to get the plugin translations
PLUGINS_FOLDER = os.path.join(app.root_path, "plugins")
host = None
port = None
if hasattr(config, 'SERVER_NAME'):
    host,port = config.SERVER_NAME.split(":")
port = int(port)

@manager.command
def runserver():
    """Run the server."""
    socketio.run(app, use_reloader=True, host=host, port=port)
#manager.add_command("runserver", Server(host, port=port))

@manager.command
def list_routes():
    import urllib
    output = []
    for rule in app.url_map.iter_rules():
        methods = ','.join(rule.methods)
        line = urllib.unquote("{:50s} {:30s} {}".format(rule.endpoint, methods, rule))
        output.append(line)
    for line in sorted(output):
        print(line)

# Migration commands
#~ manager.add_command('db', MigrateCommand)


# Add interactive project shell
def make_shell_context():
    return dict(app=current_app, db=db)
manager.add_command("shell", Shell(make_context=make_shell_context))


@manager.command
def initdb():
    """Creates the database."""

    alcommand.upgrade(janitoo_config(config.SQLALCHEMY_DATABASE_URI), 'heads')


@manager.command
def dropdb():
    """Deletes the database."""

    db.drop_all()


@manager.command
def versiondb():
    """Show the database version."""
    engine = create_engine(config.SQLALCHEMY_DATABASE_URI)
    conn = engine.connect()
    context = MigrationContext.configure(conn)
    current_rev = context.get_current_heads()
    print current_rev


@manager.command
def heads():
    """Show the heads of migration scripts<."""
    alcommand.heads(janitoo_config(args.url), verbose=True)


@manager.command
def populate(dropdb=False, createdb=False):
    """Creates the database with some default data.
    To drop or create the databse use the '-d' or '-c' options.
    """
    pass


@manager.option('-u', '--username', dest='username')
@manager.option('-p', '--password', dest='password')
@manager.option('-e', '--email', dest='email')
def create_admin(username=None, password=None, email=None):
    """Creates the admin user."""

    pass


@manager.option('-u', '--username', dest='username')
@manager.option('-p', '--password', dest='password')
@manager.option('-e', '--email', dest='email')
def install(username=None, password=None, email=None):
    """Installs FlaskBB with all necessary data."""

    pass


@manager.command
def insertmassdata():
    """Warning: This can take a long time!.
    Creates 100 topics and each topic contains 100 posts.
    """
    pass


@manager.option('-s', '--settings', dest="settings")
@manager.option('-f', '--force', dest="force", default=False)
def update(settings=None, force=False):
    """Updates the settings via a fixture. All fixtures have to be placed
    in the `fixture`.
    Usage: python manage.py update -s your_fixture
    """

    pass


@manager.command
def update_translations():
    """Updates all translations."""

    # update janitoo_manager translations
    translations_folder = os.path.join(app.root_path, "translations")
    source_file = os.path.join(translations_folder, "messages.pot")

    subprocess.call(["pybabel", "extract", "-F", "config/babel.cfg",
                     "-k", "lazy_gettext", "-o", source_file, "."])
    subprocess.call(["pybabel", "update", "-i", source_file,
                     "-d", translations_folder])

    # updates all plugin translations too
    for plugin in plugin_manager.all_plugins:
        update_plugin_translations(plugin)


@manager.command
def add_translations(translation):
    """Adds a new language to the translations."""

    translations_folder = os.path.join(app.root_path, "translations")
    source_file = os.path.join(translations_folder, "messages.pot")

    subprocess.call(["pybabel", "extract", "-F", "config/babel.cfg",
                     "-k", "lazy_gettext", "-o", source_file, "."])
    subprocess.call(["pybabel", "init", "-i", source_file,
                     "-d", translations_folder, "-l", translation])


@manager.command
def compile_translations():
    """Compiles all translations."""

    # compile janitoo_manager translations
    translations_folder = os.path.join(app.root_path, "translations")
    subprocess.call(["pybabel", "compile", "-d", translations_folder])

    # compile all plugin translations
    for plugin in plugin_manager.all_plugins:
        compile_plugin_translations(plugin)


# Plugin translation commands
@manager.command
def add_plugin_translations(plugin, translation):
    """Adds a new language to the plugin translations. Expects the name
    of the plugin and the translations name like "en".
    """

    plugin_folder = os.path.join(PLUGINS_FOLDER, plugin)
    translations_folder = os.path.join(plugin_folder, "translations")
    source_file = os.path.join(translations_folder, "messages.pot")

    subprocess.call(["pybabel", "extract", "-F", "config/babel.cfg",
                     "-k", "lazy_gettext", "-o", source_file,
                     plugin_folder])
    subprocess.call(["pybabel", "init", "-i", source_file,
                     "-d", translations_folder, "-l", translation])


@manager.command
def update_plugin_translations(plugin):
    """Updates the plugin translations. Expects the name of the plugin."""

    plugin_folder = os.path.join(PLUGINS_FOLDER, plugin)
    translations_folder = os.path.join(plugin_folder, "translations")
    source_file = os.path.join(translations_folder, "messages.pot")

    subprocess.call(["pybabel", "extract", "-F", "config/babel.cfg",
                     "-k", "lazy_gettext", "-o", source_file,
                     plugin_folder])
    subprocess.call(["pybabel", "update", "-i", source_file,
                     "-d", translations_folder])


@manager.command
def compile_plugin_translations(plugin):
    """Compile the plugin translations. Expects the name of the plugin."""

    plugin_folder = os.path.join(PLUGINS_FOLDER, plugin)
    translations_folder = os.path.join(plugin_folder, "translations")

    subprocess.call(["pybabel", "compile", "-d", translations_folder])


@manager.command
def download_emoji():
    """Downloads emojis from emoji-cheat-sheet.com."""
    HOSTNAME = "https://api.github.com"
    REPO = "/repos/arvida/emoji-cheat-sheet.com/contents/public/graphics/emojis"
    FULL_URL = "{}{}".format(HOSTNAME, REPO)
    DOWNLOAD_PATH = os.path.join(app.static_folder, "emoji")

    response = requests.get(FULL_URL)

    cached_count = 0
    count = 0
    for image in response.json():
        if not os.path.exists(os.path.abspath(DOWNLOAD_PATH)):
            print("{} does not exist.".format(os.path.abspath(DOWNLOAD_PATH)))
            sys.exit(1)

        full_path = os.path.join(DOWNLOAD_PATH, image["name"])
        if not os.path.exists(full_path):
            count += 1
            f = open(full_path, 'wb')
            f.write(requests.get(image["download_url"]).content)
            f.close()
            if count == cached_count + 50:
                cached_count = count
                print("{} out of {} Emojis downloaded...".format(
                      cached_count, len(response.json())))

    print("Finished downloading {} Emojis.".format(count))

if __name__ == "__main__":
    manager.run()
